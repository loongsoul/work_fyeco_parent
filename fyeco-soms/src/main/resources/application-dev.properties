# 授权服务器地址
#auth-server: http://localhost:8080 # 授权服务器地址
#security:
#  oauth2:
#    client:
#      client-id: testclient # 授权服务器配置的client id
#      client-secret: testclient # 授权服务器配置的client secret
#      scope: test
#      access-token-uri: ${auth-server}/oauth/token # 获取access token接口
#      user-authorization-uri: ${auth-server}/oauth/authorize #  获取Authorization Code接口
#    resource:
#      token-info-uri: ${auth-server}/oauth/check_token # 验证token的接口
##      user-info-uri: ${auth-server}/user # 一个可以获取认证授权的自定义接口，可以在授权服务器，也可以在其他服务器上
##      prefer-token-info: true # 如果同时配置了token-info-uri 和 user-info-uri，这个现象设置使用哪个取验证授权
#

# 服务器配置
server.port=9090
# Undertow 配置
server.undertow.accesslog.enabled=true
server.undertow.accesslog.dir=logs/admin
server.undertow.accesslog.pattern=%t [%I] %a %r %s (%b Byte) (%T ms)
# SSL 配置
server.ssl.enabled=false
server.ssl.key-store=classpath:keys/boot211.p12
server.ssl.key-store-password=123456
server.ssl.key-store-type=PKCS12
server.ssl.key-alias=boot211
# 启用 HTTP2
#server.http2.enabled=true
# 压缩响应大小
server.compression.enabled=true

# 记录请求详情
spring.http.log-request-details=true

# MVC
#spring.devtools.restart.exclude=META-INF/maven/**,META-INF/resources/**,resources/**,static/**,public/**,templates/**
#  /META-INF/maven/**,META-INF/resources/**,resources/**,static/**,public/**,templates/**
#spring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/
#spring.mvc.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/,classpath:/templates/

# Thymeleaf
# THYMELEAF (ThymeleafAutoConfiguration)
#开启模板缓存（默认值：true）
spring.thymeleaf.cache=false 
##Check that the template exists before rendering it.
#spring.thymeleaf.check-template=true
##检查模板位置是否正确(默认值:true)
#spring.thymeleaf.check-template-location=true
##Content-Type的值（默认值：text/html）
#spring.thymeleaf.servlet.content-type=text/html
##开启MVC Thymeleaf视图解析(默认值：true)
#spring.thymeleaf.enabled=true
##模板编码
#spring.thymeleaf.encoding=UTF-8
##要被排除在解析之外的视图名称列表，用逗号分隔
#spring.thymeleaf.excluded-view-names=
##要运用于模板之上的模板模式。另见StandardTemplate-ModeHandlers(默认值：HTML5)
#spring.thymeleaf.mode=HTML
##在构建URL时添加到视图名称前的前缀（默认值：classpath:/templates/）
#spring.thymeleaf.prefix=classpath:/templates/
##在构建URL时添加到视图名称后的后缀（默认值：.html）
#spring.thymeleaf.suffix=.html
##Thymeleaf模板解析器在解析器链中的顺序。默认情况下，它排第一位。顺序从1开始，只有在定义了额外的TemplateResolver Bean时才需要设置这个属性。
#spring.thymeleaf.template-resolver-order=1
##可解析的视图名称列表，用逗号分隔
#spring.thymeleaf.view-names=
#thymeleaf end

# Security
#security.basic.enabled=

# 静态资源访问
#spring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/

# 数据库配置
spring.datasource.name=ds_soms
spring.datasource.url=jdbc:mysql://localhost:3306/soms?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&useSSL=false&zeroDateTimeBehavior=convertToNull&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=12345678
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.sql-script-encoding=utf-8
# 连接池
spring.datasource.type=com.zaxxer.hikari.HikariDataSource

# MyBatis 配置属性
## MyBatis xml 配置文件位置
## mybatis.config-location=classpath:mybatis-config.xml
## Mapper xml 配置文件位置
mybatis.mapper-locations=classpath:mybatis/mapper/*.xml
## 用于搜索类型别名的包。（包名分隔符为,）
mybatis.type-aliases-package=ltd.fyeco.soms.domain.entity
## 用于搜索类型处理程序的包。（包名分隔符为,）
mybatis.type-handlers-package=ltd.fyeco.soms.typehandler
## 表明是否检查 Mybatis xml 配置文件位置
mybatis.check-config-location=false
## org.mybatis.spring.SqlSessionTemplate的执行模式 SIMPLE/REUSE/BATCH
mybatis.executor-type=SIMPLE

# Mybatis 嵌套属性
## 允许在嵌套语句中使用分页（RowBounds）
mybatis.configuration.safe-row-bounds-enabled=false
## 允许在嵌套语句中使用分页（ResultHandler），默认true
mybatis.configuration.safe-result-handler-enabled=true
## 是否开启自动驼峰命名规则映射
mybatis.configuration.map-underscore-to-camel-case=false
## 当开启时，任何方法的调用都会加载该对象的所有属性，禁用时，每个属性会按需加载(加载字段由SQL指定)，以提高性能
mybatis.configuration.aggressive-lazy-loading=false
## 是否允许单一语句返回多结果集（需要兼容驱动），默认true
mybatis.configuration.multiple-result-sets-enabled=true
## 允许 JDBC 支持自动生成主键，需要驱动兼容。 
## 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能兼容但仍可正常工作（比如 Derby）
mybatis.configuration.use-generated-keys=false
## 使用列标签代替列名
mybatis.configuration.use-column-label=true
## 全局映射器缓存开关
mybatis.configuration.cache-enabled=true
## 指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，
## 这对于有 Map.keySet() 依赖或 null 值初始化的时候是有用的。注意基本类型（int、boolean等）是不能设置成 null 的
mybatis.configuration.call-setters-on-nulls=false
## 允许使用方法签名中的名称作为语句参数名称。 
## 为了使用该特性，你的工程必须采用Java 8+编译，并且加上-parameters选项
mybatis.configuration.use-actual-param-name=true
## 当返回行的所有列都是空时，MyBatis默认返回null，适用于嵌套的结果集
mybatis.configuration.return-instance-for-empty-row=false
## 延迟加载的全局开关，查询时，关闭关联对象即时加载以提高性能
mybatis.configuration.lazy-loading-enabled=false
## 设置超时时间，它决定驱动等待数据库响应的秒数
mybatis.configuration.default-statement-timeout=5
## 为驱动的结果集获取数量（fetchSize）设置一个提示值
mybatis.configuration.default-fetch-size=10
## 对于批量更新操作缓存SQL以提高性能，默认SIMPLE
mybatis.configuration.default-executor-type=REUSE

# TkMapper
mapper.mappers=ltd.fyeco.soms.dao.IGenericMapper
## tk.mybatis.springboot.util.MyMapper
## tk.mybatis.mapper.common.MySqlMapper
## 设置 insert 和 update 中，是否判断字符串类型!=''
mapper.not-empty=true
## 主键自增回写
mapper.identity=MYSQL
# 枚举按简单类型处理
mapper.enum-as-simple-type=true

# 分页
pagehelper.helperDialect=mysql
## 分页合理化参数，默认false
## 设置为 true 时，pageNum<=0 时会查询第一页， pageNum>pages（超过总数时），会查询最后一页
## 默认false 时，直接根据参数进行查询
pagehelper.reasonable=true
## 支持通过 Mapper 接口参数来传递分页参数，默认值false
pagehelper.support-methods-arguments=true
pagehelper.params=count=countSql

# Redis
spring.redis.database=0
spring.redis.host=127.0.0.1
spring.redis.port=6379
spring.redis.password=

# 日志
logging.config=classpath:log4j2-spring.xml
#logging.level.root = WARN
#logging.file=classpath:logs/example.log
logging.path=logs/admin
#logging.level.com.example=DEBUG
#logging.level.org.springframework.web = DEBUG
#logging.level.org.hibernate = ERROR
#logging.group.my=com.example
logging.level.com.zaxxer.hikari=INFO
logging.level.org.springframework.security=INFO


# 文件上传
spring.servlet.multipart.max-file-size=10240KB
spring.servlet.multipart.max-request-size=10240KB

#图形验证码配置
fantJ.security.code.image.length = 6
fantJ.security.code.image.width = 100
fantJ.security.code.image.url=/user,/user/*

